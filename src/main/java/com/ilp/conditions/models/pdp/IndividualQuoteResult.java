/*
 * PDP FSP API (Implementation Friendly Version)
 * DRAFT FOR INTERNAL REVIEW ONLY - Based on API Definition.docx updated on 2017-07-06 - Implementation friendly version. [Changes from pervious version (2.7) - maxLength changed to 48 from 32 for IlpCondition and IlpFulfilment Types.]
 *
 * OpenAPI spec version: 2.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ilp.conditions.models.pdp;

import java.util.Objects;

/**
 * Data model for the complex type IndividualQuoteResult.
 */
public class IndividualQuoteResult {

  private String quoteId = null;

  private Money payeeFspReceiveAmount = null;

  private Money payeeReceiveAmount = null;

  private Money payeeFspFee = null;

  private Money payeeFspCommission = null;

  private String ilpPacket = null;

  private String condition = null;

  private ErrorInformation errorInformation = null;

  private ExtensionList extensionList = null;

  public IndividualQuoteResult quoteId(String quoteId) {
    this.quoteId = quoteId;
    return this;
  }

   /**
   * Identifies quote message.
   * @return quoteId
  **/
  public String getQuoteId() {
    return quoteId;
  }

  public void setQuoteId(String quoteId) {
    this.quoteId = quoteId;
  }

  public IndividualQuoteResult payeeFspReceiveAmount(Money payeeFspReceiveAmount) {
    this.payeeFspReceiveAmount = payeeFspReceiveAmount;
    return this;
  }

   /**
   * Get payeeFspReceiveAmount
   * @return payeeFspReceiveAmount
  **/
  public Money getPayeeFspReceiveAmount() {
    return payeeFspReceiveAmount;
  }

  public void setPayeeFspReceiveAmount(Money payeeFspReceiveAmount) {
    this.payeeFspReceiveAmount = payeeFspReceiveAmount;
  }

  public IndividualQuoteResult payeeReceiveAmount(Money payeeReceiveAmount) {
    this.payeeReceiveAmount = payeeReceiveAmount;
    return this;
  }

   /**
   * Get payeeReceiveAmount
   * @return payeeReceiveAmount
  **/
  public Money getPayeeReceiveAmount() {
    return payeeReceiveAmount;
  }

  public void setPayeeReceiveAmount(Money payeeReceiveAmount) {
    this.payeeReceiveAmount = payeeReceiveAmount;
  }

  public IndividualQuoteResult payeeFspFee(Money payeeFspFee) {
    this.payeeFspFee = payeeFspFee;
    return this;
  }

   /**
   * Get payeeFspFee
   * @return payeeFspFee
  **/
  public Money getPayeeFspFee() {
    return payeeFspFee;
  }

  public void setPayeeFspFee(Money payeeFspFee) {
    this.payeeFspFee = payeeFspFee;
  }

  public IndividualQuoteResult payeeFspCommission(Money payeeFspCommission) {
    this.payeeFspCommission = payeeFspCommission;
    return this;
  }

   /**
   * Get payeeFspCommission
   * @return payeeFspCommission
  **/
  public Money getPayeeFspCommission() {
    return payeeFspCommission;
  }

  public void setPayeeFspCommission(Money payeeFspCommission) {
    this.payeeFspCommission = payeeFspCommission;
  }

  public IndividualQuoteResult ilpPacket(String ilpPacket) {
    this.ilpPacket = ilpPacket;
    return this;
  }

   /**
   * The ILP Packet that must be attached to the transfer by the Payer.
   * @return ilpPacket
  **/
  public String getIlpPacket() {
    return ilpPacket;
  }

  public void setIlpPacket(String ilpPacket) {
    this.ilpPacket = ilpPacket;
  }

  public IndividualQuoteResult condition(String condition) {
    this.condition = condition;
    return this;
  }

   /**
   * The condition that must be attached to the transfer by the Payer.
   * @return condition
  **/
  public String getCondition() {
    return condition;
  }

  public void setCondition(String condition) {
    this.condition = condition;
  }

  public IndividualQuoteResult errorInformation(ErrorInformation errorInformation) {
    this.errorInformation = errorInformation;
    return this;
  }

   /**
   * Get errorInformation
   * @return errorInformation
  **/
  public ErrorInformation getErrorInformation() {
    return errorInformation;
  }

  public void setErrorInformation(ErrorInformation errorInformation) {
    this.errorInformation = errorInformation;
  }

  public IndividualQuoteResult extensionList(ExtensionList extensionList) {
    this.extensionList = extensionList;
    return this;
  }

   /**
   * Get extensionList
   * @return extensionList
  **/
  public ExtensionList getExtensionList() {
    return extensionList;
  }

  public void setExtensionList(ExtensionList extensionList) {
    this.extensionList = extensionList;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IndividualQuoteResult individualQuoteResult = (IndividualQuoteResult) o;
    return Objects.equals(this.quoteId, individualQuoteResult.quoteId) &&
        Objects.equals(this.payeeFspReceiveAmount, individualQuoteResult.payeeFspReceiveAmount) &&
        Objects.equals(this.payeeReceiveAmount, individualQuoteResult.payeeReceiveAmount) &&
        Objects.equals(this.payeeFspFee, individualQuoteResult.payeeFspFee) &&
        Objects.equals(this.payeeFspCommission, individualQuoteResult.payeeFspCommission) &&
        Objects.equals(this.ilpPacket, individualQuoteResult.ilpPacket) &&
        Objects.equals(this.condition, individualQuoteResult.condition) &&
        Objects.equals(this.errorInformation, individualQuoteResult.errorInformation) &&
        Objects.equals(this.extensionList, individualQuoteResult.extensionList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quoteId, payeeFspReceiveAmount, payeeReceiveAmount, payeeFspFee, payeeFspCommission, ilpPacket, condition, errorInformation, extensionList);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IndividualQuoteResult {\n");
    
    sb.append("    quoteId: ").append(toIndentedString(quoteId)).append("\n");
    sb.append("    payeeFspReceiveAmount: ").append(toIndentedString(payeeFspReceiveAmount)).append("\n");
    sb.append("    payeeReceiveAmount: ").append(toIndentedString(payeeReceiveAmount)).append("\n");
    sb.append("    payeeFspFee: ").append(toIndentedString(payeeFspFee)).append("\n");
    sb.append("    payeeFspCommission: ").append(toIndentedString(payeeFspCommission)).append("\n");
    sb.append("    ilpPacket: ").append(toIndentedString(ilpPacket)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    errorInformation: ").append(toIndentedString(errorInformation)).append("\n");
    sb.append("    extensionList: ").append(toIndentedString(extensionList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}
