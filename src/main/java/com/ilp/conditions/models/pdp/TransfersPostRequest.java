/*
 * PDP FSP API (Implementation Friendly Version)
 * DRAFT FOR INTERNAL REVIEW ONLY - Based on API Definition.docx updated on 2017-07-06 - Implementation friendly version. [Changes from pervious version (2.7) - maxLength changed to 48 from 32 for IlpCondition and IlpFulfilment Types.]
 *
 * OpenAPI spec version: 2.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ilp.conditions.models.pdp;

import java.util.Objects;

/**
 * POST /transfers Request object
 */
public class TransfersPostRequest {

  private String transferId = null;

  private String payeeFsp = null;

  private String payerFsp = null;

  private Money amount = null;

  private String ilpPacket = null;

  private String condition = null;

  private String expiration = null;

  private ExtensionList extensionList = null;

  public TransfersPostRequest transferId(String transferId) {
    this.transferId = transferId;
    return this;
  }

   /**
   * The common ID between the FSPs and the optional Switch for the transfer object, decided by the Payer FSP. The ID should be reused for resends of the same transfer. A new ID should be generated for each new transfer.
   * @return transferId
  **/
  public String getTransferId() {
    return transferId;
  }

  public void setTransferId(String transferId) {
    this.transferId = transferId;
  }

  public TransfersPostRequest payeeFsp(String payeeFsp) {
    this.payeeFsp = payeeFsp;
    return this;
  }

   /**
   * Payee FSP in the proposed financial transaction.
   * @return payeeFsp
  **/
  public String getPayeeFsp() {
    return payeeFsp;
  }

  public void setPayeeFsp(String payeeFsp) {
    this.payeeFsp = payeeFsp;
  }

  public TransfersPostRequest payerFsp(String payerFsp) {
    this.payerFsp = payerFsp;
    return this;
  }

   /**
   * Payer FSP in the proposed financial transaction.
   * @return payerFsp
  **/
  public String getPayerFsp() {
    return payerFsp;
  }

  public void setPayerFsp(String payerFsp) {
    this.payerFsp = payerFsp;
  }

  public TransfersPostRequest amount(Money amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  public Money getAmount() {
    return amount;
  }

  public void setAmount(Money amount) {
    this.amount = amount;
  }

  public TransfersPostRequest ilpPacket(String ilpPacket) {
    this.ilpPacket = ilpPacket;
    return this;
  }

   /**
   * The ILP Packet containing the amount delivered to the Payee and the ILP Address of the Payee and any other end-to-end data.
   * @return ilpPacket
  **/
  public String getIlpPacket() {
    return ilpPacket;
  }

  public void setIlpPacket(String ilpPacket) {
    this.ilpPacket = ilpPacket;
  }

  public TransfersPostRequest condition(String condition) {
    this.condition = condition;
    return this;
  }

   /**
   * The condition that must be fulfilled to commit the transfer.
   * @return condition
  **/
  public String getCondition() {
    return condition;
  }

  public void setCondition(String condition) {
    this.condition = condition;
  }

  public TransfersPostRequest expiration(String expiration) {
    this.expiration = expiration;
    return this;
  }

   /**
   * Expiration can be set to get a quick failure expiration of the transfer. The transfer should be rolled back if no fulfilment is delivered before this time.
   * @return expiration
  **/
  public String getExpiration() {
    return expiration;
  }

  public void setExpiration(String expiration) {
    this.expiration = expiration;
  }

  public TransfersPostRequest extensionList(ExtensionList extensionList) {
    this.extensionList = extensionList;
    return this;
  }

   /**
   * Get extensionList
   * @return extensionList
  **/
  public ExtensionList getExtensionList() {
    return extensionList;
  }

  public void setExtensionList(ExtensionList extensionList) {
    this.extensionList = extensionList;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransfersPostRequest transfersPostRequest = (TransfersPostRequest) o;
    return Objects.equals(this.transferId, transfersPostRequest.transferId) &&
        Objects.equals(this.payeeFsp, transfersPostRequest.payeeFsp) &&
        Objects.equals(this.payerFsp, transfersPostRequest.payerFsp) &&
        Objects.equals(this.amount, transfersPostRequest.amount) &&
        Objects.equals(this.ilpPacket, transfersPostRequest.ilpPacket) &&
        Objects.equals(this.condition, transfersPostRequest.condition) &&
        Objects.equals(this.expiration, transfersPostRequest.expiration) &&
        Objects.equals(this.extensionList, transfersPostRequest.extensionList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transferId, payeeFsp, payerFsp, amount, ilpPacket, condition, expiration, extensionList);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransfersPostRequest {\n");
    
    sb.append("    transferId: ").append(toIndentedString(transferId)).append("\n");
    sb.append("    payeeFsp: ").append(toIndentedString(payeeFsp)).append("\n");
    sb.append("    payerFsp: ").append(toIndentedString(payerFsp)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    ilpPacket: ").append(toIndentedString(ilpPacket)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    extensionList: ").append(toIndentedString(extensionList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}
