/*
 * PDP FSP API (Implementation Friendly Version)
 * DRAFT FOR INTERNAL REVIEW ONLY - Based on API Definition.docx updated on 2017-07-06 - Implementation friendly version. [Changes from pervious version (2.7) - maxLength changed to 48 from 32 for IlpCondition and IlpFulfilment Types.]
 *
 * OpenAPI spec version: 2.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ilp.conditions.models.pdp;

import java.util.Objects;

/**
 * POST /quotes object
 */
public class QuotesPostRequest {

  private String quoteId = null;

  private String transactionId = null;

  private String transactionRequestId = null;

  private Party payee = null;

  private Party payer = null;

  private String amountType = null;

  private Money amount = null;

  private Money fees = null;

  private TransactionType transactionType = null;

  private GeoCode geoCode = null;

  private String note = null;

  private String expiration = null;

  private ExtensionList extensionList = null;

  public QuotesPostRequest quoteId(String quoteId) {
    this.quoteId = quoteId;
    return this;
  }

   /**
   * Common ID between the FSPs for the quote object, decided by the Payer FSP. The ID should be reused for resends of the same quote for a transaction. A new ID should be generated for each new quote for a transaction.
   * @return quoteId
  **/
  public String getQuoteId() {
    return quoteId;
  }

  public void setQuoteId(String quoteId) {
    this.quoteId = quoteId;
  }

  public QuotesPostRequest transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Common ID (decided by the Payer FSP) between the FSPs for the future transaction object. The actual transaction will be created as part of a successful transfer process. The ID should be reused for resends of the same quote for a transaction. A new ID should be generated for each new quote for a transaction.
   * @return transactionId
  **/
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }

  public QuotesPostRequest transactionRequestId(String transactionRequestId) {
    this.transactionRequestId = transactionRequestId;
    return this;
  }

   /**
   * Identifies an optional previously-sent transaction request.
   * @return transactionRequestId
  **/
  public String getTransactionRequestId() {
    return transactionRequestId;
  }

  public void setTransactionRequestId(String transactionRequestId) {
    this.transactionRequestId = transactionRequestId;
  }

  public QuotesPostRequest payee(Party payee) {
    this.payee = payee;
    return this;
  }

   /**
   * Get payee
   * @return payee
  **/
  public Party getPayee() {
    return payee;
  }

  public void setPayee(Party payee) {
    this.payee = payee;
  }

  public QuotesPostRequest payer(Party payer) {
    this.payer = payer;
    return this;
  }

   /**
   * Get payer
   * @return payer
  **/
  public Party getPayer() {
    return payer;
  }

  public void setPayer(Party payer) {
    this.payer = payer;
  }

  public QuotesPostRequest amountType(String amountType) {
    this.amountType = amountType;
    return this;
  }

   /**
   * SEND for send amount, RECEIVE for receive amount.
   * @return amountType
  **/
  public String getAmountType() {
    return amountType;
  }

  public void setAmountType(String amountType) {
    this.amountType = amountType;
  }

  public QuotesPostRequest amount(Money amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  public Money getAmount() {
    return amount;
  }

  public void setAmount(Money amount) {
    this.amount = amount;
  }

  public QuotesPostRequest fees(Money fees) {
    this.fees = fees;
    return this;
  }

   /**
   * Get fees
   * @return fees
  **/
  public Money getFees() {
    return fees;
  }

  public void setFees(Money fees) {
    this.fees = fees;
  }

  public QuotesPostRequest transactionType(TransactionType transactionType) {
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Get transactionType
   * @return transactionType
  **/
  public TransactionType getTransactionType() {
    return transactionType;
  }

  public void setTransactionType(TransactionType transactionType) {
    this.transactionType = transactionType;
  }

  public QuotesPostRequest geoCode(GeoCode geoCode) {
    this.geoCode = geoCode;
    return this;
  }

   /**
   * Get geoCode
   * @return geoCode
  **/
  public GeoCode getGeoCode() {
    return geoCode;
  }

  public void setGeoCode(GeoCode geoCode) {
    this.geoCode = geoCode;
  }

  public QuotesPostRequest note(String note) {
    this.note = note;
    return this;
  }

   /**
   * A memo that will be attached to the transaction.
   * @return note
  **/
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }

  public QuotesPostRequest expiration(String expiration) {
    this.expiration = expiration;
    return this;
  }

   /**
   * Expiration is optional. It can be set to get a quick failure in case the peer FSP takes too long to respond. Also, it may be beneficial for Consumer, Agent, and Merchant to know that their request has a time limit.
   * @return expiration
  **/
  public String getExpiration() {
    return expiration;
  }

  public void setExpiration(String expiration) {
    this.expiration = expiration;
  }

  public QuotesPostRequest extensionList(ExtensionList extensionList) {
    this.extensionList = extensionList;
    return this;
  }

   /**
   * Get extensionList
   * @return extensionList
  **/
  public ExtensionList getExtensionList() {
    return extensionList;
  }

  public void setExtensionList(ExtensionList extensionList) {
    this.extensionList = extensionList;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuotesPostRequest quotesPostRequest = (QuotesPostRequest) o;
    return Objects.equals(this.quoteId, quotesPostRequest.quoteId) &&
        Objects.equals(this.transactionId, quotesPostRequest.transactionId) &&
        Objects.equals(this.transactionRequestId, quotesPostRequest.transactionRequestId) &&
        Objects.equals(this.payee, quotesPostRequest.payee) &&
        Objects.equals(this.payer, quotesPostRequest.payer) &&
        Objects.equals(this.amountType, quotesPostRequest.amountType) &&
        Objects.equals(this.amount, quotesPostRequest.amount) &&
        Objects.equals(this.fees, quotesPostRequest.fees) &&
        Objects.equals(this.transactionType, quotesPostRequest.transactionType) &&
        Objects.equals(this.geoCode, quotesPostRequest.geoCode) &&
        Objects.equals(this.note, quotesPostRequest.note) &&
        Objects.equals(this.expiration, quotesPostRequest.expiration) &&
        Objects.equals(this.extensionList, quotesPostRequest.extensionList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quoteId, transactionId, transactionRequestId, payee, payer, amountType, amount, fees, transactionType, geoCode, note, expiration, extensionList);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuotesPostRequest {\n");
    
    sb.append("    quoteId: ").append(toIndentedString(quoteId)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    transactionRequestId: ").append(toIndentedString(transactionRequestId)).append("\n");
    sb.append("    payee: ").append(toIndentedString(payee)).append("\n");
    sb.append("    payer: ").append(toIndentedString(payer)).append("\n");
    sb.append("    amountType: ").append(toIndentedString(amountType)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    geoCode: ").append(toIndentedString(geoCode)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    extensionList: ").append(toIndentedString(extensionList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}
