/*
 * PDP FSP API (Implementation Friendly Version)
 * DRAFT FOR INTERNAL REVIEW ONLY - Based on API Definition.docx updated on 2017-07-06 - Implementation friendly version. [Changes from pervious version (2.7) - maxLength changed to 48 from 32 for IlpCondition and IlpFulfilment Types.]
 *
 * OpenAPI spec version: 2.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.ilp.conditions.models.pdp;

import java.util.Objects;

/**
 * POST /transactionRequests object
 */
public class TransactionRequestsPostRequest {
  private String transactionRequestId = null;

  private Party payee = null;

  private PartyIdInfo payer = null;

  private Money amount = null;

  private TransactionType transactionType = null;

  private String note = null;

  private GeoCode geoCode = null;

  private String authenticationType = null;

  private String expiration = null;

  private ExtensionList extensionList = null;

  public TransactionRequestsPostRequest transactionRequestId(String transactionRequestId) {
    this.transactionRequestId = transactionRequestId;
    return this;
  }

   /**
   * Common ID between the FSPs for the transaction request object, decided by the Payee FSP. The ID should be reused for resends of the same transaction request. A new ID should be generated for each new transaction request.
   * @return transactionRequestId
  **/
  public String getTransactionRequestId() {
    return transactionRequestId;
  }

  public void setTransactionRequestId(String transactionRequestId) {
    this.transactionRequestId = transactionRequestId;
  }

  public TransactionRequestsPostRequest payee(Party payee) {
    this.payee = payee;
    return this;
  }

   /**
   * Get payee
   * @return payee
  **/
  public Party getPayee() {
    return payee;
  }

  public void setPayee(Party payee) {
    this.payee = payee;
  }

  public TransactionRequestsPostRequest payer(PartyIdInfo payer) {
    this.payer = payer;
    return this;
  }

   /**
   * Get payer
   * @return payer
  **/
  public PartyIdInfo getPayer() {
    return payer;
  }

  public void setPayer(PartyIdInfo payer) {
    this.payer = payer;
  }

  public TransactionRequestsPostRequest amount(Money amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  public Money getAmount() {
    return amount;
  }

  public void setAmount(Money amount) {
    this.amount = amount;
  }

  public TransactionRequestsPostRequest transactionType(TransactionType transactionType) {
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Get transactionType
   * @return transactionType
  **/
  public TransactionType getTransactionType() {
    return transactionType;
  }

  public void setTransactionType(TransactionType transactionType) {
    this.transactionType = transactionType;
  }

  public TransactionRequestsPostRequest note(String note) {
    this.note = note;
    return this;
  }

   /**
   * Reason for the transaction request, intended to the Payer.
   * @return note
  **/
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }

  public TransactionRequestsPostRequest geoCode(GeoCode geoCode) {
    this.geoCode = geoCode;
    return this;
  }

   /**
   * Get geoCode
   * @return geoCode
  **/
  public GeoCode getGeoCode() {
    return geoCode;
  }

  public void setGeoCode(GeoCode geoCode) {
    this.geoCode = geoCode;
  }

  public TransactionRequestsPostRequest authenticationType(String authenticationType) {
    this.authenticationType = authenticationType;
    return this;
  }

   /**
   * OTP or QR Code, otherwise empty.
   * @return authenticationType
  **/
  public String getAuthenticationType() {
    return authenticationType;
  }

  public void setAuthenticationType(String authenticationType) {
    this.authenticationType = authenticationType;
  }

  public TransactionRequestsPostRequest expiration(String expiration) {
    this.expiration = expiration;
    return this;
  }

   /**
   * Can be set to get a quick failure in case the peer FSP takes too long to respond. Also, it may be beneficial for Consumer, Agent, Merchant to know that their request has a time limit.
   * @return expiration
  **/
  public String getExpiration() {
    return expiration;
  }

  public void setExpiration(String expiration) {
    this.expiration = expiration;
  }

  public TransactionRequestsPostRequest extensionList(ExtensionList extensionList) {
    this.extensionList = extensionList;
    return this;
  }

   /**
   * Get extensionList
   * @return extensionList
  **/
  public ExtensionList getExtensionList() {
    return extensionList;
  }

  public void setExtensionList(ExtensionList extensionList) {
    this.extensionList = extensionList;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionRequestsPostRequest transactionRequestsPostRequest = (TransactionRequestsPostRequest) o;
    return Objects.equals(this.transactionRequestId, transactionRequestsPostRequest.transactionRequestId) &&
        Objects.equals(this.payee, transactionRequestsPostRequest.payee) &&
        Objects.equals(this.payer, transactionRequestsPostRequest.payer) &&
        Objects.equals(this.amount, transactionRequestsPostRequest.amount) &&
        Objects.equals(this.transactionType, transactionRequestsPostRequest.transactionType) &&
        Objects.equals(this.note, transactionRequestsPostRequest.note) &&
        Objects.equals(this.geoCode, transactionRequestsPostRequest.geoCode) &&
        Objects.equals(this.authenticationType, transactionRequestsPostRequest.authenticationType) &&
        Objects.equals(this.expiration, transactionRequestsPostRequest.expiration) &&
        Objects.equals(this.extensionList, transactionRequestsPostRequest.extensionList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionRequestId, payee, payer, amount, transactionType, note, geoCode, authenticationType, expiration, extensionList);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionRequestsPostRequest {\n");
    
    sb.append("    transactionRequestId: ").append(toIndentedString(transactionRequestId)).append("\n");
    sb.append("    payee: ").append(toIndentedString(payee)).append("\n");
    sb.append("    payer: ").append(toIndentedString(payer)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    geoCode: ").append(toIndentedString(geoCode)).append("\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    extensionList: ").append(toIndentedString(extensionList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}
